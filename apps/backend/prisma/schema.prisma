// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(uuid())
  name             String?
  username         String        @unique
  email            String        @unique
  bio              String?
  profilePic       String?
  passwordHash     String
  followers        UserFollows[] @relation("Followers")
  following        UserFollows[] @relation("Following")
  posts            Post[]        @relation("UserPost")
  comments         Comment[]     @relation("UserComments")
  likes            Like[]        @relation("UserLikes")
  tags             Post[]        @relation("UserTags")
  preferences      Json?
  activeTourPlanid String?       @unique
  activeTourPlan   TourPlan?     @relation("UserActivePlan", fields: [activeTourPlanid], references: [id])
  createdPlan      TourPlan[]    @relation("PlanCreator")
  planAsMember     TourPlan[]    @relation("TourPlanMembers")
  createdAt        DateTime      @default(now())
}

model TourPlan {
  id            String   @id @default(uuid())
  creatorId     String
  creator       User     @relation("PlanCreator", fields: [creatorId], references: [id])
  members       User[]   @relation("TourPlanMembers")
  planData      Json
  isMerged      Boolean  @default(false)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  activeForUser User?    @relation("UserActivePlan")
}

model UserFollows {
  followerId  String
  followingId String
  follower    User     @relation("Following", fields: [followerId], references: [id])
  following   User     @relation("Followers", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())

  @@id([followerId, followingId])
}

model Post {
  id     String @id @default(uuid())
  user   User   @relation("UserPost", fields: [userId], references: [id])
  userId String
  url    String
  text   String
  tag    User[] @relation("UserTags")

  location  String
  comments  Comment[] @relation("PostComments")
  likes     Like[]    @relation("PostLikes")
  createdAt DateTime  @default(now())
}

model Comment {
  id        String   @id @default(uuid())
  text      String
  post      Post     @relation("PostComments", fields: [postId], references: [id])
  postId    String
  user      User     @relation("UserComments", fields: [userId], references: [id])
  userId    String
  likes     Like[]   @relation("CommentLikes")
  createdAt DateTime @default(now())
}

model Like {
  id        String   @id @default(uuid())
  post      Post?    @relation("PostLikes", fields: [postId], references: [id])
  postId    String?
  comment   Comment? @relation("CommentLikes", fields: [commentId], references: [id])
  commentId String?
  user      User     @relation("UserLikes", fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
}
